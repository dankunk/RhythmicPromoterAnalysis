# load libraries
#library(txdbmaker)
library(GenomicFeatures)
#BiocManager::install("Rsamtools")
library(Rsamtools)
library(Biostrings)
library(dplyr)
# sql database can be loaded, its good to reset your dir here.
setwd('C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/')
# set path to indexed genome
rpadi_genome = "C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/R_padi_v2.fasta"
# make FaFile if not already loaded
rpadi_fafile = FaFile(rpadi_genome)
# set path to database (it should have info for chromosome starts and ends, see create_TxDb.R)
rpadi_txdb = loadDb("rpadi_V2_txdb.sqlite")
# extract genes
rpadi_genes = genes(rpadi_txdb)
# view extracted genes
head(rpadi_genes)
# extract promoter regions around each gene TSS:
rpadi_promoters = promoters(rpadi_genes, upstream=1500, downstream=0)
# trim them so they don't exceed contig boundaries:
rpadi_promoters = trim(rpadi_promoters)
# now extract these (possibly shortened) promoter ranges
rpadi_upseqs = getSeq(rpadi_fafile, rpadi_promoters)
## if you want them oriented in the gene’s 5'->3' direction,
neg_idx = strand(rpadi_promoters) == "-"
rpadi_upseqs[neg_idx] = reverseComplement(rpadi_upseqs[neg_idx])
# rename the sequences using your gene IDs
names(rpadi_upseqs) = rpadi_genes$gene_id
# laod rhythmic df if filtering to make a rhythmic fasta
rhythmic_df = read.csv("example_rhythmic_dataset_jtk.csv")
non_rhythmic_IDs = rhythmic_df %>%
filter(ADJ.P > 0.05)
non_rhythmic_IDs$gene_ID = sub("\\.t.*", "", non_rhythmic_IDs$CycID)
non_rhythmic_seqs = rpadi_upseqs[names(rpadi_upseqs) %in% non_rhythmic_IDs$gene_ID]
head(non_rhythmic_seqs)
writeXStringSet(non_rhythmic_seqs, "rpadi_upstream_promoters_DREME_non-rhythmic_5-3.fasta")
# load packages
BiocManager::install("memes")
library(memes)
# setting dir to the project data dir
setwd("C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/")
# setting fasta location
rhythmic_fa = system.file("rpadi_upstream_promoters_DREME_rhythmic_5-3.fasta", package = "memes")
# Running dreme
dreme_out = runDreme(rhythmic_fa, outdir = "meme_output_rhythmic")
# Running dreme
runDreme(rhythmic_fa, outdir = "meme_output_rhythmic")
# setting fasta location
rhythmic_fa = system.file("rpadi_upstream_promoters_DREME_rhythmic_5-3.fasta", package = "memes")
# setting fasta location
rhythmic_fa = system.file("rpadi_upstream_promoters_DREME_rhythmic_5-3.fasta")
library(Biostrings)
# setting fasta location
rhythmic_fa = readDNAStringSet("rpadi_upstream_promoters_DREME_rhythmic_5-3.fasta")
# Running dreme
runDreme(rhythmic_fa, outdir = "meme_output_rhythmic")
# Running dreme
runDreme(rhythmic_fa, "shuffle", outdir = "meme_output_rhythmic")
# Build a descriptive FASTA name per promoter:
prom_chr     = as.character(seqnames(rpadi_promoters))
prom_start   = start(rpadi_promoters)
# load libraries
#library(txdbmaker)
library(GenomicFeatures)
#BiocManager::install("Rsamtools")
library(Rsamtools)
library(Biostrings)
library(dplyr)
# sql database can be loaded, its good to reset your dir here.
setwd('C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/')
# set path to indexed genome
rpadi_genome = "C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/R_padi_v2.fasta"
# make FaFile if not already loaded
rpadi_fafile = FaFile(rpadi_genome)
# set path to database (it should have info for chromosome starts and ends, see create_TxDb.R)
rpadi_txdb = loadDb("rpadi_V2_txdb.sqlite")
# extract genes
rpadi_genes = genes(rpadi_txdb)
# view extracted genes
head(rpadi_genes)
# extract promoter regions around each gene TSS:
rpadi_promoters = promoters(rpadi_genes, upstream=1500, downstream=0)
# trim them so they don't exceed contig boundaries:
rpadi_promoters = trim(rpadi_promoters)
# now extract these (possibly shortened) promoter ranges
rpadi_upseqs = getSeq(rpadi_fafile, rpadi_promoters)
## if you want them oriented in the gene’s 5'->3' direction,
neg_idx = strand(rpadi_promoters) == "-"
rpadi_upseqs[neg_idx] = reverseComplement(rpadi_upseqs[neg_idx])
# rename the sequences using your gene IDs
names(rpadi_upseqs) = rpadi_genes$gene_id
# laod rhythmic df if filtering to make a rhythmic fasta
rhythmic_df = read.csv("example_rhythmic_dataset_jtk.csv")
# filter for genes that are significantly rhythmic
rhythmic_IDs = rhythmic_df %>%
filter(ADJ.P <= 0.05)
non_rhythmic_IDs = rhythmic_df %>%
filter(ADJ.P > 0.05)
# remove trailing info from gene ID
rhythmic_IDs$gene_ID = sub("\\.t.*", "", rhythmic_IDs$CycID)
non_rhythmic_IDs$gene_ID = sub("\\.t.*", "", non_rhythmic_IDs$CycID)
# filter sequences matching rhythmic IDs
rhythmic_seqs = rpadi_upseqs[names(rpadi_upseqs) %in% rhythmic_IDs$gene_ID]
non_rhythmic_seqs = rpadi_upseqs[names(rpadi_upseqs) %in% non_rhythmic_IDs$gene_ID]
# Build a descriptive FASTA name per promoter:
prom_chr     = as.character(seqnames(rpadi_promoters))
prom_start   = start(rpadi_promoters)
prom_end     = end(rpadi_promoters)
prom_strand  = as.character(strand(rpadi_promoters))
gene_ids     = rpadi_genes$gene_id  # same order as rpadi_promoters
# For instance: "g1|scf7180000007785:2235-6402(-)"
my_names = paste0(
gene_ids,
"|",
prom_chr,
":",
prom_start,
"-",
prom_end,
"(",
prom_strand,
")"
)
head(rhythmic_seqs)
# Now assign these to your DNAStringSet object:
names(rhythmic_seqs) = my_names
# load libraries
#library(txdbmaker)
library(GenomicFeatures)
#BiocManager::install("Rsamtools")
library(Rsamtools)
library(Biostrings)
library(dplyr)
# sql database can be loaded, its good to reset your dir here.
setwd('C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/')
# set path to indexed genome
rpadi_genome = "C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/R_padi_v2.fasta"
# make FaFile if not already loaded
rpadi_fafile = FaFile(rpadi_genome)
# set path to database (it should have info for chromosome starts and ends, see create_TxDb.R)
rpadi_txdb = loadDb("rpadi_V2_txdb.sqlite")
# extract genes
rpadi_genes = genes(rpadi_txdb)
# view extracted genes
head(rpadi_genes)
# extract promoter regions around each gene TSS:
rpadi_promoters = promoters(rpadi_genes, upstream=1500, downstream=0)
# trim them so they don't exceed contig boundaries:
rpadi_promoters = trim(rpadi_promoters)
# now extract these (possibly shortened) promoter ranges
rpadi_upseqs = getSeq(rpadi_fafile, rpadi_promoters)
## if you want them oriented in the gene’s 5'->3' direction,
neg_idx = strand(rpadi_promoters) == "-"
rpadi_upseqs[neg_idx] = reverseComplement(rpadi_upseqs[neg_idx])
# -----------------------------------------------------------
# (1) Keep gene_id-based names on rpadi_upseqs
#     so we can easily subset
# -----------------------------------------------------------
names(rpadi_upseqs) <- rpadi_genes$gene_id  # already done in your script
# -----------------------------------------------------------
# (2) Create descriptive names for all promoters
# -----------------------------------------------------------
prom_chr    <- as.character(seqnames(rpadi_promoters))
prom_start  <- start(rpadi_promoters)
prom_end    <- end(rpadi_promoters)
prom_strand <- as.character(strand(rpadi_promoters))
gene_ids    <- rpadi_genes$gene_id
# Build a descriptive FASTA name per promoter
# e.g. "g1|scf7180000007785:2235-6402(-)"
fancy_names <- paste0(
gene_ids, "|",
prom_chr, ":",
prom_start, "-",
prom_end, "(",
prom_strand, ")"
)
# Make a named vector that maps from gene_id -> fancy_name
fancy_map <- setNames(fancy_names, gene_ids)
# -----------------------------------------------------------
# (3) Subset by rhythmic or non-rhythmic IDs as usual
# -----------------------------------------------------------
rhythmic_IDs <- rhythmic_df %>%
dplyr::filter(ADJ.P <= 0.05)
rhythmic_df = read.csv("example_rhythmic_dataset_jtk.csv")
rhythmic_IDs <- rhythmic_df %>%
dplyr::filter(ADJ.P <= 0.05)
rhythmic_IDs$gene_ID <- sub("\\.t.*", "", rhythmic_IDs$CycID)
non_rhythmic_IDs <- rhythmic_df %>%
dplyr::filter(ADJ.P > 0.05)
non_rhythmic_IDs$gene_ID <- sub("\\.t.*", "", non_rhythmic_IDs$CycID)
rhythmic_seqs <- rpadi_upseqs[names(rpadi_upseqs) %in% rhythmic_IDs$gene_ID]
non_rhythmic_seqs <- rpadi_upseqs[names(rpadi_upseqs) %in% non_rhythmic_IDs$gene_ID]
# -----------------------------------------------------------
# (4) Rename the subset sequences with fancy names
# -----------------------------------------------------------
names(rhythmic_seqs)      <- fancy_map[names(rhythmic_seqs)]
names(non_rhythmic_seqs)  <- fancy_map[names(non_rhythmic_seqs)]
# -----------------------------------------------------------
# Write them out to FASTA
# -----------------------------------------------------------
writeXStringSet(rhythmic_seqs,
"rpadi_upstream_promoters_DREME_rhythmic_5-3.fasta")
writeXStringSet(non_rhythmic_seqs,
"rpadi_upstream_promoters_DREME_non-rhythmic_5-3.fasta")
head(rhythmic_seqs)
# load libraries
#library(txdbmaker)
library(GenomicFeatures)
#BiocManager::install("Rsamtools")
library(Rsamtools)
library(Biostrings)
library(dplyr)
# sql database can be loaded, its good to reset your dir here.
setwd('C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/')
# set path to indexed genome
rpadi_genome = "C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/R_padi_v2.fasta"
# make FaFile if not already loaded
rpadi_fafile = FaFile(rpadi_genome)
# set path to database (it should have info for chromosome starts and ends, see create_TxDb.R)
rpadi_txdb = loadDb("rpadi_V2_txdb.sqlite")
# extract genes
rpadi_genes = genes(rpadi_txdb)
# view extracted genes
head(rpadi_genes)
# extract promoter regions around each gene TSS:
rpadi_promoters = promoters(rpadi_genes, upstream=1500, downstream=0)
# trim them so they don't exceed contig boundaries:
rpadi_promoters = trim(rpadi_promoters)
# now extract these (possibly shortened) promoter ranges
rpadi_upseqs = getSeq(rpadi_fafile, rpadi_promoters)
## if you want them oriented in the gene’s 5'->3' direction,
neg_idx = strand(rpadi_promoters) == "-"
rpadi_upseqs[neg_idx] = reverseComplement(rpadi_upseqs[neg_idx])
# rename the sequences using your gene IDs
names(rpadi_upseqs) = rpadi_genes$gene_id
# grabbing meta info
prom_chr    = as.character(seqnames(rpadi_promoters))
prom_start  = start(rpadi_promoters)
prom_end    = end(rpadi_promoters)
prom_strand = as.character(strand(rpadi_promoters))
gene_ids    = rpadi_genes$gene_id
# Build a descriptive FASTA name per gene promoter
# e.g. "g1|scf7180000007785:2235-6402(-)"
fancy_names = paste0(
gene_ids, "|",
prom_chr, ":",
prom_start, "-",
prom_end, "(",
prom_strand, ")"
)
# Make a named vector that maps from gene_id -> fancy_name
fancy_map = setNames(fancy_names, gene_ids)
rhythmic_df = read.csv("example_rhythmic_dataset_jtk.csv")
rhythmic_IDs = rhythmic_df %>%
dplyr::filter(ADJ.P <= 0.05)
rhythmic_IDs$gene_ID = sub("\\.t.*", "", rhythmic_IDs$CycID)
non_rhythmic_IDs = rhythmic_df %>%
dplyr::filter(ADJ.P > 0.05)
non_rhythmic_IDs$gene_ID = sub("\\.t.*", "", non_rhythmic_IDs$CycID)
rhythmic_seqs = rpadi_upseqs[names(rpadi_upseqs) %in% rhythmic_IDs$gene_ID]
non_rhythmic_seqs = rpadi_upseqs[names(rpadi_upseqs) %in% non_rhythmic_IDs$gene_ID]
names(rhythmic_seqs)      = fancy_map[names(rhythmic_seqs)]
names(non_rhythmic_seqs)  = fancy_map[names(non_rhythmic_seqs)]
head(rhythmic_seqs)
head(non_rhythmic_seqs)
writeXStringSet(rhythmic_seqs,
"rpadi_upstream_promoters_DREME_rhythmic_5-3.fasta")
writeXStringSet(non_rhythmic_seqs,
"rpadi_upstream_promoters_DREME_non-rhythmic_5-3.fasta")
# load libraries
#library(txdbmaker)
library(GenomicFeatures)
#BiocManager::install("Rsamtools")
library(Rsamtools)
library(Biostrings)
library(dplyr)
# sql database can be loaded, its good to reset your dir here.
setwd('C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/')
# set path to indexed genome
rpadi_genome = "C:/Users/danie/OneDrive - Colostate/NIFA_PROJECT/Obj1/analysis/promoter_analysis/genome_gff/R_padi_v2.fasta"
# make FaFile if not already loaded
rpadi_fafile = FaFile(rpadi_genome)
# set path to database (it should have info for chromosome starts and ends, see create_TxDb.R)
rpadi_txdb = loadDb("rpadi_V2_txdb.sqlite")
# extract genes
rpadi_genes = genes(rpadi_txdb)
# view extracted genes
head(rpadi_genes)
# extract promoter regions around each gene TSS:
rpadi_promoters = promoters(rpadi_genes, upstream=1500, downstream=0)
# trim them so they don't exceed contig boundaries:
rpadi_promoters = trim(rpadi_promoters)
# now extract these (possibly shortened) promoter ranges
rpadi_upseqs = getSeq(rpadi_fafile, rpadi_promoters)
## if you want them oriented in the gene’s 5'->3' direction,
neg_idx = strand(rpadi_promoters) == "-"
rpadi_upseqs[neg_idx] = reverseComplement(rpadi_upseqs[neg_idx])
# rename the sequences using your gene IDs
names(rpadi_upseqs) = rpadi_genes$gene_id
rhythmic_df = read.csv("example_rhythmic_dataset_jtk.csv")
rhythmic_IDs = rhythmic_df %>%
dplyr::filter(ADJ.P <= 0.05)
rhythmic_IDs$gene_ID = sub("\\.t.*", "", rhythmic_IDs$CycID)
non_rhythmic_IDs = rhythmic_df %>%
dplyr::filter(ADJ.P > 0.05)
non_rhythmic_IDs$gene_ID = sub("\\.t.*", "", non_rhythmic_IDs$CycID)
rhythmic_seqs = rpadi_upseqs[names(rpadi_upseqs) %in% rhythmic_IDs$gene_ID]
non_rhythmic_seqs = rpadi_upseqs[names(rpadi_upseqs) %in% non_rhythmic_IDs$gene_ID]
head(rhythmic_seqs)
head(non_rhythmic_seqs)
writeXStringSet(rhythmic_seqs,
"rpadi_upstream_promoters_DREME_rhythmic_5-3.fasta")
writeXStringSet(non_rhythmic_seqs,
"rpadi_upstream_promoters_DREME_non-rhythmic_5-3.fasta")
